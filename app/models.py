"""
Database Models for AI Browser Automation
"""
import json
from datetime import datetime
from flask_sqlalchemy import SQLAlchemy
from sqlalchemy.orm import DeclarativeBase


class Base(DeclarativeBase):
    pass


db = SQLAlchemy(model_class=Base)


class AutomationPlan(db.Model):
    """Model for storing automation plans generated by Planner Agent"""
    
    __tablename__ = 'automation_plans'
    
    id = db.Column(db.Integer, primary_key=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, index=True)
    execution_id = db.Column(db.Integer, db.ForeignKey('execution_history.id'), nullable=True)
    
    goal = db.Column(db.Text, nullable=False)
    start_url = db.Column(db.Text, nullable=False)
    plan_yaml = db.Column(db.Text, nullable=False)
    validated_locators = db.Column(db.Text, nullable=True)
    plan_metadata = db.Column(db.Text, nullable=True)
    
    def to_dict(self):
        """Convert model to dictionary"""
        return {
            'id': self.id,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'execution_id': self.execution_id,
            'goal': self.goal,
            'start_url': self.start_url,
            'plan_yaml': self.plan_yaml,
            'validated_locators': self.validated_locators,
            'plan_metadata': self.plan_metadata
        }


class GeneratedScript(db.Model):
    """Model for storing Python Playwright scripts generated by Generator Agent"""
    
    __tablename__ = 'generated_scripts'
    
    id = db.Column(db.Integer, primary_key=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, index=True)
    execution_id = db.Column(db.Integer, db.ForeignKey('execution_history.id'), nullable=True)
    plan_id = db.Column(db.Integer, db.ForeignKey('automation_plans.id'), nullable=True)
    
    script_type = db.Column(db.String(20), nullable=False, default='original')
    python_code = db.Column(db.Text, nullable=False)
    script_hash = db.Column(db.String(64), nullable=True)
    
    is_healed = db.Column(db.Boolean, nullable=False, default=False)
    healing_iterations = db.Column(db.Integer, nullable=True, default=0)
    
    def to_dict(self):
        """Convert model to dictionary"""
        return {
            'id': self.id,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'execution_id': self.execution_id,
            'plan_id': self.plan_id,
            'script_type': self.script_type,
            'python_code': self.python_code,
            'script_hash': self.script_hash,
            'is_healed': self.is_healed,
            'healing_iterations': self.healing_iterations
        }


class TraceFile(db.Model):
    """Model for storing Playwright trace files for Healer Agent"""
    
    __tablename__ = 'trace_files'
    
    id = db.Column(db.Integer, primary_key=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, index=True)
    execution_id = db.Column(db.Integer, db.ForeignKey('execution_history.id'), nullable=True)
    script_id = db.Column(db.Integer, db.ForeignKey('generated_scripts.id'), nullable=True)
    
    trace_path = db.Column(db.Text, nullable=False)
    trace_analysis = db.Column(db.Text, nullable=True)
    identified_issues = db.Column(db.Text, nullable=True)
    
    def to_dict(self):
        """Convert model to dictionary"""
        return {
            'id': self.id,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'execution_id': self.execution_id,
            'script_id': self.script_id,
            'trace_path': self.trace_path,
            'trace_analysis': self.trace_analysis,
            'identified_issues': self.identified_issues
        }


class ExecutionHistory(db.Model):
    """Model for storing automation execution history"""
    
    __tablename__ = 'execution_history'
    
    id = db.Column(db.Integer, primary_key=True)
    created_at = db.Column(db.DateTime, nullable=False, default=datetime.utcnow, index=True)
    
    prompt = db.Column(db.Text, nullable=False)
    engine = db.Column(db.String(50), nullable=False)
    headless = db.Column(db.Boolean, nullable=False, default=False)
    
    success = db.Column(db.Boolean, nullable=False, default=False)
    error_message = db.Column(db.Text, nullable=True)
    
    screenshot_path = db.Column(db.Text, nullable=True)  # JSON array of screenshot paths
    execution_logs = db.Column(db.Text, nullable=True)
    
    iterations = db.Column(db.Integer, nullable=True)
    execution_time = db.Column(db.Float, nullable=True)
    
    automation_plans = db.relationship('AutomationPlan', backref='execution', lazy=True)
    generated_scripts = db.relationship('GeneratedScript', backref='execution', lazy=True)
    trace_files = db.relationship('TraceFile', backref='execution', lazy=True)
    
    def to_dict(self):
        """Convert model to dictionary"""
        screenshots = []
        if self.screenshot_path:
            try:
                screenshots = json.loads(self.screenshot_path)
            except (json.JSONDecodeError, TypeError):
                screenshots = [self.screenshot_path] if self.screenshot_path else []
        
        return {
            'id': self.id,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'prompt': self.prompt,
            'engine': self.engine,
            'headless': self.headless,
            'success': self.success,
            'error_message': self.error_message,
            'screenshot_path': self.screenshot_path,
            'screenshots': screenshots,
            'execution_logs': self.execution_logs,
            'iterations': self.iterations,
            'execution_time': self.execution_time
        }
