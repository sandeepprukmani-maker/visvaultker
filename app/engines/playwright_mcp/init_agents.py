"""
Playwright Test Agents Initialization Script
Following Microsoft's Playwright Test Agents conventions

Usage:
    python -m app.engines.playwright_mcp.init_agents [--base-url URL] [--workspace PATH]
"""
import argparse
import sys
import logging
from pathlib import Path
from .file_manager import AgentFileManager

logging.basicConfig(level=logging.INFO, format='%(message)s')
logger = logging.getLogger(__name__)


def init_agents(base_url: str = "http://localhost:5000", workspace: str = "."):
    """
    Initialize Playwright Test Agents workspace
    
    Creates the following structure:
    - specs/          # Test plans in Markdown format
    - tests/          # Generated Playwright tests
    - tests/seed.spec.py  # Seed test for initialization
    
    Args:
        base_url: Base URL of the application to test
        workspace: Root directory for the workspace
    """
    logger.info("=" * 80)
    logger.info("üé≠ Initializing Playwright Test Agents")
    logger.info("=" * 80)
    logger.info("")
    logger.info("Following Microsoft's Playwright Test Agents conventions:")
    logger.info("  üìù Planner  - Explores app and creates test plans")
    logger.info("  üé® Generator - Transforms plans into executable tests")
    logger.info("  üîß Healer   - Automatically repairs failing tests")
    logger.info("")
    
    # Initialize file manager
    file_manager = AgentFileManager(workspace)
    
    # Create directory structure
    logger.info("Creating directory structure...")
    directories = file_manager.initialize_directories()
    
    for name, path in directories.items():
        logger.info(f"  ‚úÖ Created: {path}/")
    
    # Create seed test
    logger.info("")
    logger.info(f"Creating seed test for {base_url}...")
    seed_path = file_manager.create_seed_test(base_url)
    logger.info(f"  ‚úÖ Created: {seed_path}")
    
    # Create README
    readme_path = Path(workspace) / "specs" / "README.md"
    readme_content = f"""# Playwright Test Agents - Test Plans

This directory contains test plans generated by the üé≠ Planner Agent.

## About Playwright Test Agents

Microsoft's Playwright Test Agents provide an AI-powered workflow for creating and maintaining test coverage:

1. **üé≠ Planner** - Explores your application and produces comprehensive test plans in Markdown format
2. **üé® Generator** - Transforms test plans into executable Playwright Python tests  
3. **üîß Healer** - Automatically repairs failing tests when the UI changes

## Directory Structure

```
workspace/
  specs/              # Test plans (this directory)
    basic-operations.md
    checkout-flow.md
  tests/              # Generated tests
    seed.spec.py      # Seed test for initialization
    test_*.py         # Generated test files
```

## Usage

### Create a Test Plan

Tell the Planner agent what you want to test:

```
"Generate a test plan for user registration"
```

The Planner will:
- Explore your application
- Identify scenarios to test
- Create a structured test plan in this directory

### Generate Tests

The Generator agent reads the test plan and creates executable tests:

```
"Generate tests from the registration plan"
```

The Generator will:
- Validate selectors against the live app
- Create production-ready Playwright tests
- Save them to the tests/ directory

### Heal Failing Tests

When tests fail due to UI changes, the Healer fixes them automatically:

```
"Heal the failing registration test"
```

The Healer will:
- Analyze the error
- Inspect the current UI
- Fix selectors and assertions
- Validate the fix works

## Application

- **Base URL**: {base_url}
- **Initialized**: {Path(seed_path).stat().st_mtime}

## Next Steps

1. Review the seed test in `tests/seed.spec.py`
2. Use the Planner agent to create your first test plan
3. Generate tests with the Generator agent
4. Let the Healer fix any failures automatically

Happy testing! üé≠
"""
    
    readme_path.write_text(readme_content, encoding='utf-8')
    logger.info(f"  ‚úÖ Created: {readme_path}")
    
    logger.info("")
    logger.info("=" * 80)
    logger.info("‚úÖ Playwright Test Agents initialized successfully!")
    logger.info("=" * 80)
    logger.info("")
    logger.info("Next steps:")
    logger.info(f"  1. Review the seed test: {seed_path}")
    logger.info(f"  2. Read the README: {readme_path}")
    logger.info("  3. Use the Planner agent to create test plans")
    logger.info("  4. Generate tests with the Generator agent")
    logger.info("  5. Let the Healer fix any failures")
    logger.info("")
    
    return {
        "success": True,
        "workspace": workspace,
        "base_url": base_url,
        "directories": directories,
        "seed_test": seed_path,
        "readme": str(readme_path)
    }


def main():
    """Command-line interface for initializing Playwright Test Agents"""
    parser = argparse.ArgumentParser(
        description="Initialize Playwright Test Agents workspace"
    )
    parser.add_argument(
        "--base-url",
        default="http://localhost:5000",
        help="Base URL of the application to test (default: http://localhost:5000)"
    )
    parser.add_argument(
        "--workspace",
        default=".",
        help="Root directory for the workspace (default: current directory)"
    )
    
    args = parser.parse_args()
    
    try:
        result = init_agents(args.base_url, args.workspace)
        return 0 if result["success"] else 1
    except Exception as e:
        logger.error(f"‚ùå Initialization failed: {e}")
        return 1


if __name__ == "__main__":
    sys.exit(main())
